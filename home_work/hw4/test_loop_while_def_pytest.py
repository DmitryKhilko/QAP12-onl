import pytest

# # Задание 1. Дано число N. Найти произведение всех чисел от 0 до N
# """
# Уточнение требований:
# 1.  N целое число.
# 2.  1 <= N <= 10.
#
# Чек-лист для проверки функции:
# 1.  Произведение чисел от 0 до N (N равно минимальному значению).
#     Ожидаемый результат: вывод произведения чисел.
# 2.	Произведение чисел от 0 до N (N внутри класса эквивалентности).
#     Ожидаемый результат: вывод произведения чисел.
# 3.	Произведение чисел от 0 до N (N равно максимальному значению).
#     Ожидаемый результат: вывод произведения чисел.
# 4.	Произведение чисел от 0 до N (N отрицательное число).
#     Ожидаемый результат: вывод сообщения, что N должно быть больше или равно 1
#     и меньше или равно 10.
# 5.	Произведение чисел от 0 до N (N равно 0).
#     Ожидаемый результат: вывод сообщения, что N должно быть больше или равно 1
#     и меньше или равно 10.
# 6.	Произведение чисел от 0 до N (N больше максимального значения).
#     Ожидаемый результат: вывод сообщения, что N должно быть больше или равно 1
#     и меньше или равно 10.
# 7.	Произведение чисел от 0 до N (N пустое).
#     Ожидаемый результат: вывод сообщения, что N должно быть числом целого типа.
# 8.	Произведение чисел от 0 до N (N - None).
#     Ожидаемый результат: вывод сообщения, что N должно быть числом целого типа.
# 9.	Произведение чисел от 0 до N (N - несколько пробелов).
#     Ожидаемый результат: вывод сообщения, что N должно быть числом целого типа.
# 10.	Произведение чисел от 0 до N (N символьное значение).
#     Ожидаемый результат: вывод сообщения, что N должно быть числом целого типа.
# """
#
#
# def multiplication_of_numbers(number: int):
#     try:
#         if type(number) not in [int]:
#             raise TypeError(f"Вы ввели значение '{number}'. Вводимое значение "
#                             f"должно быть числом целого типа")
#         if number < 1 or number > 10:
#             raise ValueError(
#                 f"Вы ввели число {number}. Вводимое число должно быть"
#                 f" от 1 до 10")
#
#         multiplication = 1
#         i = 1
#         while i <= number:
#             multiplication *= i
#             i += 1
#         return multiplication
#
#     except TypeError as exc:
#         print(exc)
#     except ValueError as exc:
#         print(exc)
#
#
# class TestMultiplicationOfNumber(object):
#
#     def test_min_value(self):
#         assert multiplication_of_numbers(1) == 1, "Произведение чисел не равно 1"
#
#     def test_internal_value(self):
#         assert multiplication_of_numbers(5) == 120, "Произведение чисел не равно 120"
#
#     def test_max_value(self):
#         assert multiplication_of_numbers(10) == 3628800, "Произведение чисел не равно 3628800"
#
#     def test_negative_value(self):
#         assert multiplication_of_numbers(-1) is None
#
#     def test_zero_value(self):
#         assert multiplication_of_numbers(0) is None
#
#     def test_more_max_value(self):
#         assert multiplication_of_numbers(11) is None
#
#     def test_empty_value(self):
#         assert multiplication_of_numbers("") is None
#
#     def test_none_value(self):
#         assert multiplication_of_numbers(None) is None
#
#     def test_spaces_value(self):
#         assert multiplication_of_numbers("   ") is None
#
#     def test_symbol_value(self):
#         assert multiplication_of_numbers("проверка") is None
#
#
# Задание 2. Поле засеяли цветами двух сортов на площади S1 и S2.
# Каждый год площадь цветов первого сорта увеличивается вдвое,
# а площадь второго сорта увеличивается втрое.
# Через сколько лет площадь первых сортов будет составлять меньше 10%
# от площади вторых сортов.
"""
Чек-лист для проверки функции:
Уточнение требований:
1.  S1, S2 - целые числа
2.  0 < S1 <= 5
3.  0 < S2 <= 3

1.  Вычисление количества лет (S1, S2: числа на нижней границе).
    Ожидаемый результат: вычисленное количество лет.
2.  Вычисление количества лет (S1, S2: числа внутри классов эквивалентности).
    Ожидаемый результат: вычисленное количество лет.
3.  Вычисление количества лет (S1, S2: числа на верхней границе).
    Ожидаемый результат: вычисленное количество лет.
4.  Вычисление количества лет (S1, S2: числа ниже верхней границы).
    Ожидаемый результат: вычисленное количество лет.
5.  Вычисление количества лет (S1, S2: числа выше верхней границы).
    Ожидаемый результат: сообщение, что введенные цифры вне разрешенных диапазонов.
6.  Вычисление количества лет (S1, S2: числа ниже нижней границы).
    Ожидаемый результат: вычисленное количество лет.
7.  Вычисление количества лет (S1, S2: числа на нижней границы).
    Ожидаемый результат: вычисленное количество лет.
8.  Вычисление количества лет (S1, S2: числа выше нижней границы).
    Ожидаемый результат: вычисленное количество лет.
9.  Вычисление количества лет (S1: 0; S2: позитивное число).
    Ожидаемый результат: вывод сообщение, что S1 должна быть в разрешенном диапазоне.
10. Вычисление количества лет (S1: не целое число; S2: позитивное число).
    Ожидаемый результат: вывод сообщение, что S1 должна быть числом в разрешенном диапазоне.
11. Вычисление количества лет (S1: позитивное число; S2: пусто).
    Ожидаемый результат: вывод сообщение, что S2 должна быть числом в разрешенном диапазоне.
12. Вычисление количества лет (S1: позитивное число; S2: 0).
    Ожидаемый результат: вывод сообщение, что S2 должна быть числом в разрешенном диапазоне.
13. Вычисление количества лет (S1: позитивное число; S2: не целое число).
    Ожидаемый результат: вывод сообщение, что S2 должна быть числом в разрешенном диапазоне.
"""


def calculation_of_years(area_1: int, area_2: int):
    if type(area_1) in [int]:
        if type(area_2) in [int]:
            if 0 < area_1 <= 5:
                if 0 < area_2 <= 3:
                    year = 1
                    while area_1 > area_2 * 0.1:
                        area_1 *= 2
                        area_2 *= 3
                        year += 1
                    return area_1, area_2, year
                else:
                    return "S2 must be between 1 and 3"
            else:
                return "S1 must be between 1 and 5"
        else:
            return "S2 must be an integer between 1 and 3"
    else:
        return "S1 must be an integer between 1 and 5"


class TestCalculationOfYears(object):

    @pytest.mark.parametrize('s_one, s_two, result',
                             ([1, 1, (64, 729, 7)],
                              [3, 2, (384, 4374, 8)],
                              [5, 3, (640, 6561, 8)],
                              [4, 2, (1024, 13122, 9)],
                              [4, 2, (1024, 13122, 9)],
                              [6, 4, "S1 must be between 1 and 5"],
                              [-1, 0, "S1 must be between 1 and 5"],
                              [0, 2, "S1 must be between 1 and 5"],
                              ["check", 2, "S1 must be an integer between 1 and 5"],
                              [4, None, "S2 must be an integer between 1 and 3"],
                              [4, 0, "S2 must be between 1 and 3"],
                              [4, 1.2, "S2 must be an integer between 1 and 3"]))
    def test_calc_of_years(self, s_one, s_two, result):
        res = calculation_of_years(s_one, s_two)
        assert result == res
